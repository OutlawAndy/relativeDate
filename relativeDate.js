// Generated by CoffeeScript 1.6.3
(function() {
  angular.module('relativeDate', []).provider('relativeDate', function() {
    var fallbackFormat, isOlderThanCutoff, translate, _cutoffDay_, _defaultFallbackFormat_, _lang_, _translationTable_;
    _defaultFallbackFormat_ = "MMM d, yyyy";
    _cutoffDay_ = 22;
    _lang_ = "en-US";
    _translationTable_ = {
      "en-US": {
        now: "just now",
        minute: "about 1 minute ago",
        minutes: "minutes ago",
        hour: "about 1 hour ago",
        hours: "hours ago",
        day: "Yesterday",
        days: "days ago",
        week: "a week ago",
        weeks: "weeks ago",
        month: "over a month ago"
      }
    };
    this.defaultFallbackFormat = function(format) {
      return _defaultFallbackFormat_ = format;
    };
    this.cutoffDayCount = function(numDays) {
      return _cutoffDay_ = numDays;
    };
    this.defaultLang = function(langCode) {
      return _lang_ = langCode;
    };
    this.addLanguage = function(langCode, translationObject) {
      return _translationTable_[langCode] = translationObject;
    };
    translate = function(key) {
      return _translationTable_[_lang_][key];
    };
    fallbackFormat = function(formatOverride) {
      return formatOverride || _defaultFallbackFormat_;
    };
    isOlderThanCutoff = function(time) {
      var date, day_diff, diff;
      date = new Date(time || "");
      diff = ((new Date()).getTime() - date.getTime()) / 1000;
      day_diff = Math.floor(diff / 86400);
      return !!(isNaN(day_diff) || day_diff < 0 || day_diff >= _cutoffDay_);
    };
    this.$get = [
      'dateFilter', '$interval', '$timeout', function(dateFilter, $interval, $timeout) {
        var lessThanOneDay, time_ago, _cache_;
        _cache_ = [];
        lessThanOneDay = function(diff) {
          switch (false) {
            case !(diff < 60):
              return translate("now");
            case !(diff < 120):
              return translate("minute");
            case !(diff < 3600):
              return Math.floor(diff / 60) + " " + translate("minutes");
            case !(diff < 7200):
              return translate("hour");
            case !(diff < 86400):
              return Math.floor(diff / 3600) + " " + translate("hours");
          }
        };
        time_ago = function(time, override) {
          var date, day_diff, diff;
          date = new Date(time || "");
          diff = ((new Date()).getTime() - date.getTime()) / 1000;
          day_diff = Math.floor(diff / 86400);
          if (isOlderThanCutoff(time)) {
            return dateFilter(date, fallbackFormat(override));
          }
          switch (false) {
            case day_diff !== 0:
              return lessThanOneDay(diff);
            case day_diff !== 1:
              return translate("day");
            case !(day_diff < 7):
              return day_diff + " " + translate("days");
            case day_diff !== 7:
              return translate("week");
            case !(day_diff < 30):
              return Math.ceil(day_diff / 7) + " " + translate("weeks");
            default:
              return translate("month");
          }
        };
        return {
          lang: function(langCode) {
            _lang_ = langCode;
            return _cache_.forEach(function(d) {
              return $timeout((function() {
                return d.callback(time_ago(d.date, d.optionalFormat));
              }), 0);
            });
          },
          set: function(date, callback, optionalFormat) {
            var index, iterator, _error, _notice, _success;
            index = _cache_.length;
            _cache_.push({
              date: date,
              callback: callback,
              optionalFormat: optionalFormat
            });
            iterator = $interval(function() {
              return callback(time_ago(date, optionalFormat));
            }, 60000);
            _success = function() {};
            _error = function() {
              return _cache_.slice(index, 1);
            };
            _notice = function() {
              if (isOlderThanCutoff(date)) {
                return $interval.cancel(iterator);
              }
            };
            iterator.then(_success, _error, _notice);
            callback(time_ago(date, optionalFormat));
            return iterator;
          }
        };
      }
    ];
    return this;
  });

}).call(this);
